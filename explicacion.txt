===========================
| LECCION GIT SOBRE RAMAS |
===========================

** Visionar Diagrama GIT MERGE en doc\diagrama_merge.png **
(Link online imagen: https://sosan.github.io/estructurawireframe/doc/diagrama_merge.png )

Ir a cmder / git bash / etc...

Mostrar ramas
git branch

> * master (el asteristico signifca en que rama estas)

Creacion de ramas
git branch nombre_de_la_rama

ejemplo: git branch dev

Cambio de ramas
git checkout dev
> Switched to branch 'dev'

git checkout master
> Switched to branch 'master'

visualizar un archivo
cat nombre_archivo.extension



git branch
* dev (el asteristico signifca en que rama estas)
  master


git status => sirve para mostrar los cambios hechos y muestra los archivos que necesitan un git add y los ficheros que no se estan
monitorizando (con git add empieza el monitorizado de esos archivos y confirmacion de los cambios )

git log => muesta los commits (puntos de guardado en el tiempo de los archivos)



Programas graficos de GIT:
git kraken => https://www.gitkraken.com/
sourcetree => https://www.sourcetreeapp.com/
github desktop => https://desktop.github.com/

IDE y Editores de Programacion que funcionan muy bien con git
VS Code => el que usamos
IntelliJ => ide de pago
Atom => ide bastante lento


Merges de GIT en la master:
+ => son commits


RAMA MASTER +-------+-------+-------------+ ( PUNTO DE MERGE que la rama MASTER SE TRAE la rama dev **)
                    |                     |
RAMA DEV            +-----+--------+------|
                          |
OTRA RAMA                 +-------------+------------

(** cont: al crear el merge se crea un commit automaticamente en la rama master, en este caso)

MERGE DE DEV A MASTER
Primer paso pasar a la rama MASTER => git checkout master
Segundo paso realizar el merge de DEV a MASTER (MASTER <- DEV )  => git merge dev ( El merge trae informacion, no envia informacion, por eso es necesario que estemos en la rama MASTER )
> Updating afcd233..145a780


En el diagrama_merge.png creariamos los comits necesarios
git add .
git commit -m "creado header"
(... segui picando codigo .... )

git add .
git commit -m "creado footer"

git branch galeria => creada la rama galeria
git branch contactar => creada la rama contactar

git branch 
> galeria
  contactar
  * master => rama actual MASTER

git checkout galeria => Vamos a la rama galeria

1) un vez pulsado intro despues de la instruccion estamos dentro de la rama galeria
2) duplicamos el index.html y renombramos a galeria.html y cambiariamos el css de galeria.html
3) Quitamos codigo que no necesitariamos para glaeria.html y seguimos picando codigo en el html y el css ....
4) Realizar los commits necesarios y una vez finalizada la tarea comandos: <git add .> y <git commit -m "finalizada galeria.html">
5) git log => apareceran los commits SOLO PARA LA RAMA GALERIA, en este caso. para salir Q del git log.
5) TRABAJO FINALIZADO...

cambiamos a la rama contactar ...
y repetimos proceso pero para la rama CONTACTAR (crear contactar.html, contactar.css )


<<<<---- PROFESOR HA EXPLICADO LA ZONA DE ARRIBA . HASTA AQUI  ----->>>>>

(...)
UNA VEZ FINALIZADO CONTACTAR Y GALERIA

cambiamos a la rama master
git checkout master

dentro de la rama no veremos el trabajo (archivos, etc...) hecho en la rama galeria.html ya que son ramas parelelas e independientes y no influyentes entre si.

PARA QUE LA RAMA MASTER SE REFLEJE EL TRABAJO DE LA RAMA GALERIA EN LA RAMA MASTER
git checkout master => cambiamos a la rama master
git merge galeria => nos traemos todo el contenido de la rama galeria


